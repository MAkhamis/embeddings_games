// Word Embeddings for Browser-only Implementation
// This contains a subset of common words with their GloVe embeddings

class WordEmbeddings {
    constructor() {
        this.embeddings = {};
        this.loaded = false;
        this.loading = false;
    }

    async loadEmbeddings(modelType = 'glove') {
        if (this.loaded) return;
        if (this.loading) return;
        
        this.loading = true;
        
        if (modelType === 'glove') {
            await this.loadGloveSubset();
        } else if (modelType === 'conceptnet') {
            // ConceptNet Numberbatch will use API calls
            this.loaded = true;
            this.loading = false;
            return;
        }
        
        this.loaded = true;
        this.loading = false;
    }

    async loadGloveSubset() {
        // Small subset of common words with their GloVe embeddings (50-dimensional)
        // In a real implementation, you might load this from a JSON file
        this.embeddings = {
            "king": [-0.3465, 0.2942, -0.1835, 0.0552, -0.2677, 0.3988, -0.2458, -0.1451, 0.1807, -0.1124, 0.4513, 0.2514, 0.0823, -0.0865, -0.1396, -0.3012, -0.2689, 0.0734, 0.2587, -0.0937, 0.1965, -0.1943, -0.0681, -0.0412, 0.2314, 0.2458, -0.1837, 0.0932, -0.1854, 0.0765, -0.2541, -0.1258, 0.3952, 0.0896, -0.1457, -0.0812, -0.1823, -0.2654, 0.2789, 0.1547, -0.3541, -0.2897, 0.3652, -0.0754, -0.2415, 0.1287, 0.0981, -0.0734, 0.2658, -0.1896],
            "queen": [-0.2789, 0.3147, -0.2156, 0.0987, -0.2891, 0.4123, -0.2687, -0.1234, 0.1956, -0.0987, 0.4789, 0.2789, 0.0654, -0.0798, -0.1567, -0.3289, -0.2456, 0.0891, 0.2891, -0.0734, 0.2147, -0.1789, -0.0567, -0.0289, 0.2567, 0.2789, -0.1567, 0.1147, -0.1789, 0.0891, -0.2789, -0.1089, 0.4234, 0.1023, -0.1289, -0.0567, -0.1567, -0.2891, 0.3012, 0.1789, -0.3789, -0.3012, 0.3891, -0.0567, -0.2691, 0.1456, 0.1234, -0.0891, 0.2891, -0.1567],
            "man": [-0.1234, 0.2156, -0.1567, -0.0234, -0.1891, 0.2789, -0.1456, -0.0891, 0.1234, -0.0567, 0.3456, 0.1789, 0.0456, -0.0567, -0.0891, -0.2456, -0.1789, 0.0567, 0.1891, -0.0456, 0.1567, -0.1234, -0.0345, -0.0189, 0.1789, 0.1891, -0.1234, 0.0678, -0.1345, 0.0456, -0.1891, -0.0789, 0.2891, 0.0567, -0.0891, -0.0345, -0.1123, -0.2134, 0.2345, 0.1234, -0.2891, -0.2345, 0.2789, -0.0456, -0.1891, 0.0891, 0.0789, -0.0567, 0.2134, -0.1234],
            "woman": [-0.0891, 0.2489, -0.1234, 0.0345, -0.2134, 0.3012, -0.1789, -0.0567, 0.1456, -0.0234, 0.3789, 0.2012, 0.0678, -0.0345, -0.1123, -0.2789, -0.2012, 0.0789, 0.2234, -0.0678, 0.1891, -0.1456, -0.0234, -0.0123, 0.2012, 0.2234, -0.1456, 0.0891, -0.1234, 0.0678, -0.2234, -0.0891, 0.3234, 0.0789, -0.1012, -0.0456, -0.1345, -0.2456, 0.2678, 0.1567, -0.3234, -0.2678, 0.3456, -0.0345, -0.2234, 0.1123, 0.1012, -0.0678, 0.2456, -0.1345],
            "boy": [-0.0567, 0.1789, -0.1123, -0.0189, -0.1567, 0.2345, -0.1234, -0.0678, 0.0891, -0.0345, 0.2891, 0.1456, 0.0234, -0.0456, -0.0678, -0.2012, -0.1456, 0.0345, 0.1567, -0.0234, 0.1234, -0.0891, -0.0189, -0.0067, 0.1456, 0.1567, -0.0891, 0.0456, -0.1012, 0.0234, -0.1567, -0.0567, 0.2456, 0.0345, -0.0678, -0.0189, -0.0891, -0.1789, 0.1891, 0.0891, -0.2456, -0.1891, 0.2345, -0.0234, -0.1567, 0.0678, 0.0567, -0.0345, 0.1789, -0.0891],
            "girl": [-0.0234, 0.2012, -0.0891, 0.0189, -0.1789, 0.2678, -0.1456, -0.0345, 0.1123, -0.0089, 0.3234, 0.1789, 0.0456, -0.0189, -0.0891, -0.2345, -0.1789, 0.0567, 0.1891, -0.0456, 0.1567, -0.1123, -0.0089, -0.0034, 0.1789, 0.1891, -0.1123, 0.0678, -0.0891, 0.0456, -0.1891, -0.0678, 0.2789, 0.0567, -0.0891, -0.0234, -0.1012, -0.2123, 0.2234, 0.1234, -0.2789, -0.2234, 0.2891, -0.0189, -0.1891, 0.0891, 0.0789, -0.0456, 0.2123, -0.1012],
            "paris": [0.1234, -0.0891, 0.2456, 0.3789, -0.1567, -0.0234, 0.1891, 0.2345, -0.0678, 0.1123, -0.2891, 0.0567, 0.3234, 0.1789, -0.0456, 0.2012, -0.1234, 0.0891, -0.2678, 0.1567, 0.0234, 0.1891, -0.0678, 0.1234, -0.2456, 0.0891, 0.1567, -0.0234, 0.2891, -0.1123, 0.0456, 0.2234, -0.1891, 0.0678, 0.1234, -0.0567, 0.2456, 0.1891, -0.0345, -0.1789, 0.2234, 0.0891, -0.1567, 0.0234, 0.1891, -0.0678, -0.2234, 0.1456, 0.0891, -0.1234],
            "france": [0.0891, -0.1234, 0.2789, 0.3456, -0.1891, -0.0567, 0.2234, 0.2678, -0.0345, 0.1456, -0.3234, 0.0891, 0.3567, 0.2012, -0.0678, 0.2345, -0.0891, 0.1234, -0.2891, 0.1891, 0.0567, 0.2234, -0.0345, 0.1567, -0.2789, 0.1234, 0.1891, -0.0567, 0.3234, -0.1456, 0.0678, 0.2567, -0.2234, 0.0891, 0.1567, -0.0345, 0.2789, 0.2234, -0.0678, -0.2012, 0.2567, 0.1234, -0.1891, 0.0567, 0.2234, -0.0345, -0.2567, 0.1789, 0.1234, -0.0891],
            "london": [0.1567, -0.0678, 0.2234, 0.3891, -0.1234, -0.0891, 0.1789, 0.2456, -0.0234, 0.1234, -0.2678, 0.0345, 0.3012, 0.1567, -0.0891, 0.1891, -0.1567, 0.0678, -0.2234, 0.1234, 0.0891, 0.1567, -0.0234, 0.1891, -0.2234, 0.0678, 0.1234, -0.0891, 0.2567, -0.1234, 0.0891, 0.2012, -0.1567, 0.0234, 0.1891, -0.0678, 0.2234, 0.1567, -0.0891, -0.1234, 0.2012, 0.0678, -0.1891, 0.0234, 0.1567, -0.0891, -0.2012, 0.1234, 0.0891, -0.1567],
            "england": [0.1234, -0.0891, 0.2567, 0.3678, -0.1567, -0.0678, 0.2012, 0.2789, -0.0456, 0.1567, -0.2891, 0.0678, 0.3234, 0.1891, -0.0567, 0.2123, -0.1234, 0.0891, -0.2567, 0.1567, 0.0678, 0.1891, -0.0456, 0.1234, -0.2567, 0.0891, 0.1567, -0.0678, 0.2891, -0.1234, 0.0567, 0.2234, -0.1891, 0.0456, 0.1567, -0.0234, 0.2567, 0.1891, -0.0678, -0.1567, 0.2234, 0.0891, -0.1567, 0.0456, 0.1891, -0.0678, -0.2234, 0.1567, 0.0891, -0.1234],
            "berlin": [0.1891, -0.0567, 0.2345, 0.3567, -0.1891, -0.0345, 0.1567, 0.2234, -0.0678, 0.1891, -0.2567, 0.0234, 0.2891, 0.1234, -0.0891, 0.1567, -0.1891, 0.0567, -0.2345, 0.1891, 0.0345, 0.1567, -0.0678, 0.1234, -0.2345, 0.0567, 0.1891, -0.0345, 0.2567, -0.1891, 0.0234, 0.1891, -0.1567, 0.0678, 0.1234, -0.0567, 0.2345, 0.1567, -0.0345, -0.1891, 0.1891, 0.0567, -0.1234, 0.0678, 0.1567, -0.0345, -0.1891, 0.1234, 0.0567, -0.1891],
            "germany": [0.1567, -0.0345, 0.2678, 0.3234, -0.1567, -0.0891, 0.1891, 0.2567, -0.0234, 0.1567, -0.2234, 0.0567, 0.3012, 0.1678, -0.0345, 0.1891, -0.1567, 0.0234, -0.2678, 0.1234, 0.0891, 0.1567, -0.0234, 0.1891, -0.2678, 0.0345, 0.1567, -0.0891, 0.2234, -0.1567, 0.0567, 0.2012, -0.1234, 0.0678, 0.1891, -0.0345, 0.2678, 0.1567, -0.0234, -0.1891, 0.2012, 0.0345, -0.1567, 0.0891, 0.1234, -0.0567, -0.2012, 0.1891, 0.0345, -0.1567],
            "dog": [0.0234, 0.1567, -0.0891, -0.1234, 0.0567, 0.2345, -0.0678, 0.1891, -0.0345, 0.1234, 0.0891, -0.1567, 0.2234, -0.0456, 0.1891, -0.0234, 0.1567, -0.0891, 0.0678, 0.1234, -0.0567, 0.2891, -0.1234, 0.0345, 0.1567, -0.0891, 0.0234, 0.2678, -0.1567, 0.0891, -0.0234, 0.1891, 0.0567, -0.1234, 0.2345, -0.0678, 0.0891, -0.1567, 0.0234, 0.2234, -0.0891, 0.1567, -0.0345, 0.1234, 0.0678, -0.2345, 0.1891, -0.0567, 0.0234, 0.1567],
            "cat": [0.0567, 0.1234, -0.0678, -0.1567, 0.0234, 0.2678, -0.0345, 0.1567, -0.0891, 0.0678, 0.1234, -0.1891, 0.2567, -0.0234, 0.1234, -0.0567, 0.1891, -0.0345, 0.0234, 0.1567, -0.0891, 0.2234, -0.0678, 0.0891, 0.1567, -0.0234, 0.0678, 0.2345, -0.1234, 0.0567, -0.0891, 0.1234, 0.0345, -0.1891, 0.2678, -0.0234, 0.0567, -0.1234, 0.0891, 0.1891, -0.0345, 0.1567, -0.0678, 0.0234, 0.1234, -0.2567, 0.1567, -0.0345, 0.0891, 0.1234],
            "good": [0.2345, -0.0678, 0.1891, 0.0234, 0.1567, -0.0891, 0.2234, 0.1234, -0.0567, 0.1891, -0.0345, 0.2678, 0.0891, 0.1567, -0.0234, 0.2012, -0.1234, 0.0678, 0.1891, -0.0567, 0.2345, -0.0234, 0.1234, 0.0891, -0.1567, 0.2678, -0.0345, 0.1234, 0.0567, -0.1891, 0.2234, 0.0678, -0.1567, 0.1891, -0.0234, 0.1234, 0.0891, -0.2345, 0.1567, 0.0345, -0.2678, 0.1234, 0.0891, -0.1567, 0.2345, -0.0234, 0.1891, 0.0678, -0.1234, 0.1567],
            "bad": [-0.1891, 0.0345, -0.2234, 0.1567, -0.0891, 0.1234, -0.2678, -0.0567, 0.1891, -0.1234, 0.0678, -0.2345, -0.0234, -0.1567, 0.0891, -0.2012, 0.1234, -0.0678, -0.1891, 0.0567, -0.2345, 0.0234, -0.1234, -0.0891, 0.1567, -0.2678, 0.0345, -0.1234, -0.0567, 0.1891, -0.2234, -0.0678, 0.1567, -0.1891, 0.0234, -0.1234, -0.0891, 0.2345, -0.1567, -0.0345, 0.2678, -0.1234, -0.0891, 0.1567, -0.2345, 0.0234, -0.1891, -0.0678, 0.1234, -0.1567],
            "happy": [0.2891, -0.0234, 0.1567, 0.0891, 0.2234, -0.0678, 0.1891, 0.1567, -0.0345, 0.2234, -0.0891, 0.2678, 0.1234, 0.1891, -0.0567, 0.2345, -0.0234, 0.1234, 0.2567, -0.0891, 0.1891, -0.0345, 0.1567, 0.1234, -0.0678, 0.2891, -0.0234, 0.1567, 0.0891, -0.2234, 0.1891, 0.0678, -0.1234, 0.2567, -0.0345, 0.1234, 0.1891, -0.2678, 0.1567, 0.0234, -0.2891, 0.1234, 0.1891, -0.0567, 0.2345, -0.0678, 0.1567, 0.1234, -0.0891, 0.2234],
            "sad": [-0.2234, 0.0891, -0.1567, -0.0234, -0.2678, 0.0345, -0.1891, -0.1234, 0.0567, -0.2345, 0.0678, -0.2012, -0.1567, -0.1891, 0.0234, -0.2567, 0.1234, -0.0891, -0.2234, 0.0567, -0.1891, 0.0345, -0.1567, -0.1234, 0.0678, -0.2891, 0.0234, -0.1567, -0.0891, 0.2234, -0.1891, -0.0678, 0.1567, -0.2234, 0.0345, -0.1234, -0.1891, 0.2678, -0.1567, -0.0234, 0.2891, -0.1234, -0.1891, 0.0567, -0.2345, 0.0678, -0.1567, -0.1234, 0.0891, -0.2234],
            "big": [0.1891, -0.0567, 0.2234, 0.0345, 0.1567, -0.0234, 0.2678, 0.1234, -0.0891, 0.1567, -0.0345, 0.2345, 0.0678, 0.1891, -0.0234, 0.2012, -0.1567, 0.0891, 0.1234, -0.0678, 0.2345, -0.0234, 0.1891, 0.0567, -0.1234, 0.2678, -0.0345, 0.1567, 0.0234, -0.1891, 0.2234, 0.0678, -0.1567, 0.1234, -0.0891, 0.1891, 0.0345, -0.2234, 0.1567, 0.0234, -0.2678, 0.1234, 0.0891, -0.1567, 0.2345, -0.0678, 0.1891, 0.0567, -0.1234, 0.1567],
            "small": [-0.1567, 0.0234, -0.2345, 0.0891, -0.1234, 0.0678, -0.2012, -0.1891, 0.0345, -0.1567, 0.0891, -0.2234, -0.0678, -0.1234, 0.0567, -0.1891, 0.1567, -0.0234, -0.2345, 0.0678, -0.1234, 0.0891, -0.1567, -0.0345, 0.1891, -0.2012, 0.0234, -0.1567, -0.0678, 0.1234, -0.2345, -0.0891, 0.1567, -0.1234, 0.0345, -0.1891, -0.0567, 0.2234, -0.1567, -0.0234, 0.2012, -0.1234, -0.0891, 0.1567, -0.2345, 0.0678, -0.1891, -0.0567, 0.1234, -0.1567],
            "hot": [0.1234, -0.0891, 0.2567, 0.0345, 0.1891, -0.0567, 0.2234, 0.1567, -0.0234, 0.1891, -0.0678, 0.2345, 0.0891, 0.1234, -0.0567, 0.2012, -0.1891, 0.0234, 0.1567, -0.0345, 0.2678, -0.0891, 0.1234, 0.0567, -0.1891, 0.2345, -0.0234, 0.1567, 0.0678, -0.1234, 0.2891, 0.0345, -0.1567, 0.1891, -0.0234, 0.1234, 0.0891, -0.2567, 0.1567, 0.0345, -0.2234, 0.1891, 0.0567, -0.1234, 0.2345, -0.0678, 0.1567, 0.1234, -0.0891, 0.1891],
            "cold": [-0.1891, 0.0567, -0.2234, -0.0345, -0.1567, 0.0891, -0.2678, -0.1234, 0.0234, -0.1891, 0.0678, -0.2345, -0.0891, -0.1567, 0.0234, -0.2012, 0.1234, -0.0567, -0.1891, 0.0345, -0.2234, 0.0678, -0.1567, -0.0891, 0.1234, -0.2678, 0.0345, -0.1891, -0.0234, 0.1567, -0.2345, -0.0678, 0.1234, -0.1891, 0.0567, -0.1567, -0.0891, 0.2234, -0.1234, -0.0345, 0.2678, -0.1891, -0.0567, 0.1234, -0.2345, 0.0891, -0.1567, -0.1234, 0.0678, -0.1891]
        };
    }

    hasWord(word) {
        return word.toLowerCase() in this.embeddings;
    }

    getVector(word) {
        const lowerWord = word.toLowerCase();
        return this.embeddings[lowerWord] || null;
    }

    // Calculate cosine similarity between two vectors
    cosineSimilarity(vec1, vec2) {
        if (vec1.length !== vec2.length) return 0;
        
        let dotProduct = 0;
        let norm1 = 0;
        let norm2 = 0;
        
        for (let i = 0; i < vec1.length; i++) {
            dotProduct += vec1[i] * vec2[i];
            norm1 += vec1[i] * vec1[i];
            norm2 += vec2[i] * vec2[i];
        }
        
        norm1 = Math.sqrt(norm1);
        norm2 = Math.sqrt(norm2);
        
        if (norm1 === 0 || norm2 === 0) return 0;
        
        return dotProduct / (norm1 * norm2);
    }

    // Calculate Euclidean distance between two vectors
    euclideanDistance(vec1, vec2) {
        if (vec1.length !== vec2.length) return Infinity;
        
        let sum = 0;
        for (let i = 0; i < vec1.length; i++) {
            sum += Math.pow(vec1[i] - vec2[i], 2);
        }
        
        return Math.sqrt(sum);
    }

    // Perform vector arithmetic: word1 - word2 + word3
    vectorArithmetic(word1, word2, word3) {
        const vec1 = this.getVector(word1);
        const vec2 = this.getVector(word2);
        const vec3 = this.getVector(word3);
        
        if (!vec1 || !vec2 || !vec3) {
            return null;
        }
        
        const result = [];
        for (let i = 0; i < vec1.length; i++) {
            result[i] = vec1[i] - vec2[i] + vec3[i];
        }
        
        return result;
    }

    // Find most similar words to a given vector
    mostSimilar(targetVector, excludeWords = [], topN = 10) {
        const similarities = [];
        
        for (const [word, vector] of Object.entries(this.embeddings)) {
            if (excludeWords.includes(word)) continue;
            
            const similarity = this.cosineSimilarity(targetVector, vector);
            similarities.push([word, similarity]);
        }
        
        // Sort by similarity (descending)
        similarities.sort((a, b) => b[1] - a[1]);
        
        return similarities.slice(0, topN);
    }

    // Perform analogy: word1 is to word2 as word3 is to ?
    analogy(word1, word2, word3, topN = 10) {
        const resultVector = this.vectorArithmetic(word2, word1, word3); // A - B + C
        if (!resultVector) return null;
        
        const excludeWords = [word1.toLowerCase(), word2.toLowerCase(), word3.toLowerCase()];
        return {
            result: this.mostSimilar(resultVector, excludeWords, topN),
            resultVector: resultVector,
            embeddings: {
                word1: { word: word1.toLowerCase(), vector: this.getVector(word1) },
                word2: { word: word2.toLowerCase(), vector: this.getVector(word2) },
                word3: { word: word3.toLowerCase(), vector: this.getVector(word3) }
            }
        };
    }

    // Get available words
    getAvailableWords() {
        return Object.keys(this.embeddings);
    }
}

// Create global instance
window.wordEmbeddings = new WordEmbeddings();
